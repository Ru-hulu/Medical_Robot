// Generated by gencpp from file xj_robot_pnc/xj_robot_taskRequest.msg
// DO NOT EDIT!


#ifndef XJ_ROBOT_PNC_MESSAGE_XJ_ROBOT_TASKREQUEST_H
#define XJ_ROBOT_PNC_MESSAGE_XJ_ROBOT_TASKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xj_robot_pnc
{
template <class ContainerAllocator>
struct xj_robot_taskRequest_
{
  typedef xj_robot_taskRequest_<ContainerAllocator> Type;

  xj_robot_taskRequest_()
    : type(0)
    , command(0)
    , dir()
    , path_name()  {
    }
  xj_robot_taskRequest_(const ContainerAllocator& _alloc)
    : type(0)
    , command(0)
    , dir(_alloc)
    , path_name(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _command_type;
  _command_type command;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _dir_type;
  _dir_type dir;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _path_name_type;
  _path_name_type path_name;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(EXECUTE)
  #undef EXECUTE
#endif
#if defined(_WIN32) && defined(RECORD)
  #undef RECORD
#endif
#if defined(_WIN32) && defined(START)
  #undef START
#endif
#if defined(_WIN32) && defined(PAUSE)
  #undef PAUSE
#endif
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif
#if defined(_WIN32) && defined(KEEP)
  #undef KEEP
#endif
#if defined(_WIN32) && defined(DISCARD)
  #undef DISCARD
#endif

  enum {
    EXECUTE = 0u,
    RECORD = 1u,
    START = 0u,
    PAUSE = 1u,
    STOP = 2u,
    KEEP = 1u,
    DISCARD = 2u,
  };


  typedef boost::shared_ptr< ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator> const> ConstPtr;

}; // struct xj_robot_taskRequest_

typedef ::xj_robot_pnc::xj_robot_taskRequest_<std::allocator<void> > xj_robot_taskRequest;

typedef boost::shared_ptr< ::xj_robot_pnc::xj_robot_taskRequest > xj_robot_taskRequestPtr;
typedef boost::shared_ptr< ::xj_robot_pnc::xj_robot_taskRequest const> xj_robot_taskRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator1> & lhs, const ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.command == rhs.command &&
    lhs.dir == rhs.dir &&
    lhs.path_name == rhs.path_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator1> & lhs, const ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xj_robot_pnc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37cf218f2fd1c0c64f11e3c996987647";
  }

  static const char* value(const ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37cf218f2fd1c0c6ULL;
  static const uint64_t static_value2 = 0x4f11e3c996987647ULL;
};

template<class ContainerAllocator>
struct DataType< ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xj_robot_pnc/xj_robot_taskRequest";
  }

  static const char* value(const ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 EXECUTE = 0\n"
"uint8 RECORD = 1\n"
"\n"
"uint8 START = 0\n"
"uint8 PAUSE = 1\n"
"uint8 STOP = 2\n"
"\n"
"uint8 KEEP = 1\n"
"uint8 DISCARD = 2\n"
"\n"
"uint8 type #EXECUTE RECORD\n"
"uint8 command #START PAUSE STOP KEEP DISCARD\n"
"string dir\n"
"string path_name\n"
;
  }

  static const char* value(const ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.command);
      stream.next(m.dir);
      stream.next(m.path_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct xj_robot_taskRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xj_robot_pnc::xj_robot_taskRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "dir: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.dir);
    s << indent << "path_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.path_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XJ_ROBOT_PNC_MESSAGE_XJ_ROBOT_TASKREQUEST_H
