// Generated by gencpp from file srvbg/people_id_lanRequest.msg
// DO NOT EDIT!


#ifndef SRVBG_MESSAGE_PEOPLE_ID_LANREQUEST_H
#define SRVBG_MESSAGE_PEOPLE_ID_LANREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace srvbg
{
template <class ContainerAllocator>
struct people_id_lanRequest_
{
  typedef people_id_lanRequest_<ContainerAllocator> Type;

  people_id_lanRequest_()
    : id_mode()  {
    }
  people_id_lanRequest_(const ContainerAllocator& _alloc)
    : id_mode(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_mode_type;
  _id_mode_type id_mode;





  typedef boost::shared_ptr< ::srvbg::people_id_lanRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srvbg::people_id_lanRequest_<ContainerAllocator> const> ConstPtr;

}; // struct people_id_lanRequest_

typedef ::srvbg::people_id_lanRequest_<std::allocator<void> > people_id_lanRequest;

typedef boost::shared_ptr< ::srvbg::people_id_lanRequest > people_id_lanRequestPtr;
typedef boost::shared_ptr< ::srvbg::people_id_lanRequest const> people_id_lanRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srvbg::people_id_lanRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srvbg::people_id_lanRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::srvbg::people_id_lanRequest_<ContainerAllocator1> & lhs, const ::srvbg::people_id_lanRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id_mode == rhs.id_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::srvbg::people_id_lanRequest_<ContainerAllocator1> & lhs, const ::srvbg::people_id_lanRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace srvbg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::srvbg::people_id_lanRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srvbg::people_id_lanRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srvbg::people_id_lanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srvbg::people_id_lanRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srvbg::people_id_lanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srvbg::people_id_lanRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srvbg::people_id_lanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbf9b5ea443f8c4b7044dfc5858cbcd6";
  }

  static const char* value(const ::srvbg::people_id_lanRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbf9b5ea443f8c4bULL;
  static const uint64_t static_value2 = 0x7044dfc5858cbcd6ULL;
};

template<class ContainerAllocator>
struct DataType< ::srvbg::people_id_lanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srvbg/people_id_lanRequest";
  }

  static const char* value(const ::srvbg::people_id_lanRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srvbg::people_id_lanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id_mode\n"
;
  }

  static const char* value(const ::srvbg::people_id_lanRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srvbg::people_id_lanRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct people_id_lanRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srvbg::people_id_lanRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srvbg::people_id_lanRequest_<ContainerAllocator>& v)
  {
    s << indent << "id_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRVBG_MESSAGE_PEOPLE_ID_LANREQUEST_H
