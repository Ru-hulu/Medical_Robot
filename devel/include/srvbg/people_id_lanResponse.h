// Generated by gencpp from file srvbg/people_id_lanResponse.msg
// DO NOT EDIT!


#ifndef SRVBG_MESSAGE_PEOPLE_ID_LANRESPONSE_H
#define SRVBG_MESSAGE_PEOPLE_ID_LANRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace srvbg
{
template <class ContainerAllocator>
struct people_id_lanResponse_
{
  typedef people_id_lanResponse_<ContainerAllocator> Type;

  people_id_lanResponse_()
    : lang_end(false)  {
    }
  people_id_lanResponse_(const ContainerAllocator& _alloc)
    : lang_end(false)  {
  (void)_alloc;
    }



   typedef uint8_t _lang_end_type;
  _lang_end_type lang_end;





  typedef boost::shared_ptr< ::srvbg::people_id_lanResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srvbg::people_id_lanResponse_<ContainerAllocator> const> ConstPtr;

}; // struct people_id_lanResponse_

typedef ::srvbg::people_id_lanResponse_<std::allocator<void> > people_id_lanResponse;

typedef boost::shared_ptr< ::srvbg::people_id_lanResponse > people_id_lanResponsePtr;
typedef boost::shared_ptr< ::srvbg::people_id_lanResponse const> people_id_lanResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srvbg::people_id_lanResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srvbg::people_id_lanResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::srvbg::people_id_lanResponse_<ContainerAllocator1> & lhs, const ::srvbg::people_id_lanResponse_<ContainerAllocator2> & rhs)
{
  return lhs.lang_end == rhs.lang_end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::srvbg::people_id_lanResponse_<ContainerAllocator1> & lhs, const ::srvbg::people_id_lanResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace srvbg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::srvbg::people_id_lanResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srvbg::people_id_lanResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srvbg::people_id_lanResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srvbg::people_id_lanResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srvbg::people_id_lanResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srvbg::people_id_lanResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srvbg::people_id_lanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "981da0baac59ad5b5999f1af6c1bd2cf";
  }

  static const char* value(const ::srvbg::people_id_lanResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x981da0baac59ad5bULL;
  static const uint64_t static_value2 = 0x5999f1af6c1bd2cfULL;
};

template<class ContainerAllocator>
struct DataType< ::srvbg::people_id_lanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srvbg/people_id_lanResponse";
  }

  static const char* value(const ::srvbg::people_id_lanResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srvbg::people_id_lanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool lang_end\n"
"\n"
"## 大语言模型节点提供服务\n"
"## id_mode格式为 病人id_当前模式\n"
"## 例如3_0(病人3，当前为巡诊模式)3_1(病人3，当前为接待模式)\n"
"## lang_end 代表大语言模型对话结束\n"
"## 结束对话后才会返回。\n"
;
  }

  static const char* value(const ::srvbg::people_id_lanResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srvbg::people_id_lanResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lang_end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct people_id_lanResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srvbg::people_id_lanResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srvbg::people_id_lanResponse_<ContainerAllocator>& v)
  {
    s << indent << "lang_end: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lang_end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRVBG_MESSAGE_PEOPLE_ID_LANRESPONSE_H
