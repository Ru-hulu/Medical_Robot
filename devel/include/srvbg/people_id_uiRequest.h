// Generated by gencpp from file srvbg/people_id_uiRequest.msg
// DO NOT EDIT!


#ifndef SRVBG_MESSAGE_PEOPLE_ID_UIREQUEST_H
#define SRVBG_MESSAGE_PEOPLE_ID_UIREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace srvbg
{
template <class ContainerAllocator>
struct people_id_uiRequest_
{
  typedef people_id_uiRequest_<ContainerAllocator> Type;

  people_id_uiRequest_()
    : people_id(0)  {
    }
  people_id_uiRequest_(const ContainerAllocator& _alloc)
    : people_id(0)  {
  (void)_alloc;
    }



   typedef int32_t _people_id_type;
  _people_id_type people_id;





  typedef boost::shared_ptr< ::srvbg::people_id_uiRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srvbg::people_id_uiRequest_<ContainerAllocator> const> ConstPtr;

}; // struct people_id_uiRequest_

typedef ::srvbg::people_id_uiRequest_<std::allocator<void> > people_id_uiRequest;

typedef boost::shared_ptr< ::srvbg::people_id_uiRequest > people_id_uiRequestPtr;
typedef boost::shared_ptr< ::srvbg::people_id_uiRequest const> people_id_uiRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srvbg::people_id_uiRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srvbg::people_id_uiRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::srvbg::people_id_uiRequest_<ContainerAllocator1> & lhs, const ::srvbg::people_id_uiRequest_<ContainerAllocator2> & rhs)
{
  return lhs.people_id == rhs.people_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::srvbg::people_id_uiRequest_<ContainerAllocator1> & lhs, const ::srvbg::people_id_uiRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace srvbg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::srvbg::people_id_uiRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srvbg::people_id_uiRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srvbg::people_id_uiRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srvbg::people_id_uiRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srvbg::people_id_uiRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srvbg::people_id_uiRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srvbg::people_id_uiRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c9e6726201cbf6822a62cbfd44572e4";
  }

  static const char* value(const ::srvbg::people_id_uiRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c9e6726201cbf68ULL;
  static const uint64_t static_value2 = 0x22a62cbfd44572e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::srvbg::people_id_uiRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srvbg/people_id_uiRequest";
  }

  static const char* value(const ::srvbg::people_id_uiRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srvbg::people_id_uiRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 people_id\n"
;
  }

  static const char* value(const ::srvbg::people_id_uiRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srvbg::people_id_uiRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.people_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct people_id_uiRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srvbg::people_id_uiRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srvbg::people_id_uiRequest_<ContainerAllocator>& v)
  {
    s << indent << "people_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.people_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRVBG_MESSAGE_PEOPLE_ID_UIREQUEST_H
