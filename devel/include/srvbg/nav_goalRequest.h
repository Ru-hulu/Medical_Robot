// Generated by gencpp from file srvbg/nav_goalRequest.msg
// DO NOT EDIT!


#ifndef SRVBG_MESSAGE_NAV_GOALREQUEST_H
#define SRVBG_MESSAGE_NAV_GOALREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace srvbg
{
template <class ContainerAllocator>
struct nav_goalRequest_
{
  typedef nav_goalRequest_<ContainerAllocator> Type;

  nav_goalRequest_()
    : tar_x(0.0)
    , tar_y(0.0)
    , tar_z(0.0)
    , tar_yaw(0.0)  {
    }
  nav_goalRequest_(const ContainerAllocator& _alloc)
    : tar_x(0.0)
    , tar_y(0.0)
    , tar_z(0.0)
    , tar_yaw(0.0)  {
  (void)_alloc;
    }



   typedef float _tar_x_type;
  _tar_x_type tar_x;

   typedef float _tar_y_type;
  _tar_y_type tar_y;

   typedef float _tar_z_type;
  _tar_z_type tar_z;

   typedef float _tar_yaw_type;
  _tar_yaw_type tar_yaw;





  typedef boost::shared_ptr< ::srvbg::nav_goalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srvbg::nav_goalRequest_<ContainerAllocator> const> ConstPtr;

}; // struct nav_goalRequest_

typedef ::srvbg::nav_goalRequest_<std::allocator<void> > nav_goalRequest;

typedef boost::shared_ptr< ::srvbg::nav_goalRequest > nav_goalRequestPtr;
typedef boost::shared_ptr< ::srvbg::nav_goalRequest const> nav_goalRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srvbg::nav_goalRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srvbg::nav_goalRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::srvbg::nav_goalRequest_<ContainerAllocator1> & lhs, const ::srvbg::nav_goalRequest_<ContainerAllocator2> & rhs)
{
  return lhs.tar_x == rhs.tar_x &&
    lhs.tar_y == rhs.tar_y &&
    lhs.tar_z == rhs.tar_z &&
    lhs.tar_yaw == rhs.tar_yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::srvbg::nav_goalRequest_<ContainerAllocator1> & lhs, const ::srvbg::nav_goalRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace srvbg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::srvbg::nav_goalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srvbg::nav_goalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srvbg::nav_goalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srvbg::nav_goalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srvbg::nav_goalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srvbg::nav_goalRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srvbg::nav_goalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e58971aac33852e1cd7a49aaeeeccdb7";
  }

  static const char* value(const ::srvbg::nav_goalRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe58971aac33852e1ULL;
  static const uint64_t static_value2 = 0xcd7a49aaeeeccdb7ULL;
};

template<class ContainerAllocator>
struct DataType< ::srvbg::nav_goalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srvbg/nav_goalRequest";
  }

  static const char* value(const ::srvbg::nav_goalRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srvbg::nav_goalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 tar_x\n"
"float32 tar_y\n"
"float32 tar_z\n"
"float32 tar_yaw\n"
;
  }

  static const char* value(const ::srvbg::nav_goalRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srvbg::nav_goalRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tar_x);
      stream.next(m.tar_y);
      stream.next(m.tar_z);
      stream.next(m.tar_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct nav_goalRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srvbg::nav_goalRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srvbg::nav_goalRequest_<ContainerAllocator>& v)
  {
    s << indent << "tar_x: ";
    Printer<float>::stream(s, indent + "  ", v.tar_x);
    s << indent << "tar_y: ";
    Printer<float>::stream(s, indent + "  ", v.tar_y);
    s << indent << "tar_z: ";
    Printer<float>::stream(s, indent + "  ", v.tar_z);
    s << indent << "tar_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.tar_yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRVBG_MESSAGE_NAV_GOALREQUEST_H
