// Generated by gencpp from file srvbg/recept_startResponse.msg
// DO NOT EDIT!


#ifndef SRVBG_MESSAGE_RECEPT_STARTRESPONSE_H
#define SRVBG_MESSAGE_RECEPT_STARTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace srvbg
{
template <class ContainerAllocator>
struct recept_startResponse_
{
  typedef recept_startResponse_<ContainerAllocator> Type;

  recept_startResponse_()
    : start_ok(false)  {
    }
  recept_startResponse_(const ContainerAllocator& _alloc)
    : start_ok(false)  {
  (void)_alloc;
    }



   typedef uint8_t _start_ok_type;
  _start_ok_type start_ok;





  typedef boost::shared_ptr< ::srvbg::recept_startResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srvbg::recept_startResponse_<ContainerAllocator> const> ConstPtr;

}; // struct recept_startResponse_

typedef ::srvbg::recept_startResponse_<std::allocator<void> > recept_startResponse;

typedef boost::shared_ptr< ::srvbg::recept_startResponse > recept_startResponsePtr;
typedef boost::shared_ptr< ::srvbg::recept_startResponse const> recept_startResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srvbg::recept_startResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srvbg::recept_startResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::srvbg::recept_startResponse_<ContainerAllocator1> & lhs, const ::srvbg::recept_startResponse_<ContainerAllocator2> & rhs)
{
  return lhs.start_ok == rhs.start_ok;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::srvbg::recept_startResponse_<ContainerAllocator1> & lhs, const ::srvbg::recept_startResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace srvbg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::srvbg::recept_startResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srvbg::recept_startResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srvbg::recept_startResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srvbg::recept_startResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srvbg::recept_startResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srvbg::recept_startResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srvbg::recept_startResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6529c2881352cd2e270013292afd34c";
  }

  static const char* value(const ::srvbg::recept_startResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6529c2881352cd2ULL;
  static const uint64_t static_value2 = 0xe270013292afd34cULL;
};

template<class ContainerAllocator>
struct DataType< ::srvbg::recept_startResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srvbg/recept_startResponse";
  }

  static const char* value(const ::srvbg::recept_startResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srvbg::recept_startResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool start_ok\n"
"\n"
"## start_recept =  true代表开始接诊服务\n"
"## start_ok 代表当前 接诊节点的状态\n"
"## 提供服务端接受到服务请求后马上返回\n"
;
  }

  static const char* value(const ::srvbg::recept_startResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srvbg::recept_startResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_ok);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct recept_startResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srvbg::recept_startResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srvbg::recept_startResponse_<ContainerAllocator>& v)
  {
    s << indent << "start_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start_ok);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRVBG_MESSAGE_RECEPT_STARTRESPONSE_H
