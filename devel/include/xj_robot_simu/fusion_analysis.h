// Generated by gencpp from file xj_robot_simu/fusion_analysis.msg
// DO NOT EDIT!


#ifndef XJ_ROBOT_SIMU_MESSAGE_FUSION_ANALYSIS_H
#define XJ_ROBOT_SIMU_MESSAGE_FUSION_ANALYSIS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <xj_robot_simu/carpose.h>

namespace xj_robot_simu
{
template <class ContainerAllocator>
struct fusion_analysis_
{
  typedef fusion_analysis_<ContainerAllocator> Type;

  fusion_analysis_()
    : linear_control(0.0)
    , linear_feedback(0.0)
    , angular_control(0.0)
    , angular_feedback(0.0)
    , lwheel_control(0.0)
    , lwheel_feedback(0.0)
    , lwheel_acc(0.0)
    , rwheel_control(0.0)
    , rwheel_feedback(0.0)
    , rwheel_acc(0.0)
    , odom_pose()  {
    }
  fusion_analysis_(const ContainerAllocator& _alloc)
    : linear_control(0.0)
    , linear_feedback(0.0)
    , angular_control(0.0)
    , angular_feedback(0.0)
    , lwheel_control(0.0)
    , lwheel_feedback(0.0)
    , lwheel_acc(0.0)
    , rwheel_control(0.0)
    , rwheel_feedback(0.0)
    , rwheel_acc(0.0)
    , odom_pose(_alloc)  {
  (void)_alloc;
    }



   typedef float _linear_control_type;
  _linear_control_type linear_control;

   typedef float _linear_feedback_type;
  _linear_feedback_type linear_feedback;

   typedef float _angular_control_type;
  _angular_control_type angular_control;

   typedef float _angular_feedback_type;
  _angular_feedback_type angular_feedback;

   typedef float _lwheel_control_type;
  _lwheel_control_type lwheel_control;

   typedef float _lwheel_feedback_type;
  _lwheel_feedback_type lwheel_feedback;

   typedef float _lwheel_acc_type;
  _lwheel_acc_type lwheel_acc;

   typedef float _rwheel_control_type;
  _rwheel_control_type rwheel_control;

   typedef float _rwheel_feedback_type;
  _rwheel_feedback_type rwheel_feedback;

   typedef float _rwheel_acc_type;
  _rwheel_acc_type rwheel_acc;

   typedef  ::xj_robot_simu::carpose_<ContainerAllocator>  _odom_pose_type;
  _odom_pose_type odom_pose;





  typedef boost::shared_ptr< ::xj_robot_simu::fusion_analysis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xj_robot_simu::fusion_analysis_<ContainerAllocator> const> ConstPtr;

}; // struct fusion_analysis_

typedef ::xj_robot_simu::fusion_analysis_<std::allocator<void> > fusion_analysis;

typedef boost::shared_ptr< ::xj_robot_simu::fusion_analysis > fusion_analysisPtr;
typedef boost::shared_ptr< ::xj_robot_simu::fusion_analysis const> fusion_analysisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xj_robot_simu::fusion_analysis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xj_robot_simu::fusion_analysis_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xj_robot_simu::fusion_analysis_<ContainerAllocator1> & lhs, const ::xj_robot_simu::fusion_analysis_<ContainerAllocator2> & rhs)
{
  return lhs.linear_control == rhs.linear_control &&
    lhs.linear_feedback == rhs.linear_feedback &&
    lhs.angular_control == rhs.angular_control &&
    lhs.angular_feedback == rhs.angular_feedback &&
    lhs.lwheel_control == rhs.lwheel_control &&
    lhs.lwheel_feedback == rhs.lwheel_feedback &&
    lhs.lwheel_acc == rhs.lwheel_acc &&
    lhs.rwheel_control == rhs.rwheel_control &&
    lhs.rwheel_feedback == rhs.rwheel_feedback &&
    lhs.rwheel_acc == rhs.rwheel_acc &&
    lhs.odom_pose == rhs.odom_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xj_robot_simu::fusion_analysis_<ContainerAllocator1> & lhs, const ::xj_robot_simu::fusion_analysis_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xj_robot_simu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xj_robot_simu::fusion_analysis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xj_robot_simu::fusion_analysis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xj_robot_simu::fusion_analysis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xj_robot_simu::fusion_analysis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xj_robot_simu::fusion_analysis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xj_robot_simu::fusion_analysis_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xj_robot_simu::fusion_analysis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9535f87409ff97acc35ef33565f17f12";
  }

  static const char* value(const ::xj_robot_simu::fusion_analysis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9535f87409ff97acULL;
  static const uint64_t static_value2 = 0xc35ef33565f17f12ULL;
};

template<class ContainerAllocator>
struct DataType< ::xj_robot_simu::fusion_analysis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xj_robot_simu/fusion_analysis";
  }

  static const char* value(const ::xj_robot_simu::fusion_analysis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xj_robot_simu::fusion_analysis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 linear_control #线速度指令\n"
"float32 linear_feedback #线速度反馈\n"
"float32 angular_control #角速度指令\n"
"float32 angular_feedback #角速度反馈\n"
"float32 lwheel_control #左轮转速指令\n"
"float32 lwheel_feedback #左轮转速反馈\n"
"float32 lwheel_acc #左轮加速度\n"
"float32 rwheel_control #右轮转速指令\n"
"float32 rwheel_feedback #右轮转速反馈\n"
"float32 rwheel_acc #右轮加速度\n"
"carpose odom_pose #odom位置\n"
"================================================================================\n"
"MSG: xj_robot_simu/carpose\n"
"float32 x\n"
"float32 y\n"
"float32 yaw\n"
;
  }

  static const char* value(const ::xj_robot_simu::fusion_analysis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xj_robot_simu::fusion_analysis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear_control);
      stream.next(m.linear_feedback);
      stream.next(m.angular_control);
      stream.next(m.angular_feedback);
      stream.next(m.lwheel_control);
      stream.next(m.lwheel_feedback);
      stream.next(m.lwheel_acc);
      stream.next(m.rwheel_control);
      stream.next(m.rwheel_feedback);
      stream.next(m.rwheel_acc);
      stream.next(m.odom_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fusion_analysis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xj_robot_simu::fusion_analysis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xj_robot_simu::fusion_analysis_<ContainerAllocator>& v)
  {
    s << indent << "linear_control: ";
    Printer<float>::stream(s, indent + "  ", v.linear_control);
    s << indent << "linear_feedback: ";
    Printer<float>::stream(s, indent + "  ", v.linear_feedback);
    s << indent << "angular_control: ";
    Printer<float>::stream(s, indent + "  ", v.angular_control);
    s << indent << "angular_feedback: ";
    Printer<float>::stream(s, indent + "  ", v.angular_feedback);
    s << indent << "lwheel_control: ";
    Printer<float>::stream(s, indent + "  ", v.lwheel_control);
    s << indent << "lwheel_feedback: ";
    Printer<float>::stream(s, indent + "  ", v.lwheel_feedback);
    s << indent << "lwheel_acc: ";
    Printer<float>::stream(s, indent + "  ", v.lwheel_acc);
    s << indent << "rwheel_control: ";
    Printer<float>::stream(s, indent + "  ", v.rwheel_control);
    s << indent << "rwheel_feedback: ";
    Printer<float>::stream(s, indent + "  ", v.rwheel_feedback);
    s << indent << "rwheel_acc: ";
    Printer<float>::stream(s, indent + "  ", v.rwheel_acc);
    s << indent << "odom_pose: ";
    s << std::endl;
    Printer< ::xj_robot_simu::carpose_<ContainerAllocator> >::stream(s, indent + "  ", v.odom_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XJ_ROBOT_SIMU_MESSAGE_FUSION_ANALYSIS_H
