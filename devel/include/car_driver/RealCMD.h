// Generated by gencpp from file car_driver/RealCMD.msg
// DO NOT EDIT!


#ifndef CAR_DRIVER_MESSAGE_REALCMD_H
#define CAR_DRIVER_MESSAGE_REALCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_driver
{
template <class ContainerAllocator>
struct RealCMD_
{
  typedef RealCMD_<ContainerAllocator> Type;

  RealCMD_()
    : auto_mode(false)
    , wheel_mode(0)
    , wheel_left_v(0)
    , wheel_right_v(0)
    , stop_flag(false)
    , re_enabled(false)
    , disabled(false)  {
    }
  RealCMD_(const ContainerAllocator& _alloc)
    : auto_mode(false)
    , wheel_mode(0)
    , wheel_left_v(0)
    , wheel_right_v(0)
    , stop_flag(false)
    , re_enabled(false)
    , disabled(false)  {
  (void)_alloc;
    }



   typedef uint8_t _auto_mode_type;
  _auto_mode_type auto_mode;

   typedef uint16_t _wheel_mode_type;
  _wheel_mode_type wheel_mode;

   typedef uint16_t _wheel_left_v_type;
  _wheel_left_v_type wheel_left_v;

   typedef uint16_t _wheel_right_v_type;
  _wheel_right_v_type wheel_right_v;

   typedef uint8_t _stop_flag_type;
  _stop_flag_type stop_flag;

   typedef uint8_t _re_enabled_type;
  _re_enabled_type re_enabled;

   typedef uint8_t _disabled_type;
  _disabled_type disabled;





  typedef boost::shared_ptr< ::car_driver::RealCMD_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_driver::RealCMD_<ContainerAllocator> const> ConstPtr;

}; // struct RealCMD_

typedef ::car_driver::RealCMD_<std::allocator<void> > RealCMD;

typedef boost::shared_ptr< ::car_driver::RealCMD > RealCMDPtr;
typedef boost::shared_ptr< ::car_driver::RealCMD const> RealCMDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_driver::RealCMD_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_driver::RealCMD_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_driver::RealCMD_<ContainerAllocator1> & lhs, const ::car_driver::RealCMD_<ContainerAllocator2> & rhs)
{
  return lhs.auto_mode == rhs.auto_mode &&
    lhs.wheel_mode == rhs.wheel_mode &&
    lhs.wheel_left_v == rhs.wheel_left_v &&
    lhs.wheel_right_v == rhs.wheel_right_v &&
    lhs.stop_flag == rhs.stop_flag &&
    lhs.re_enabled == rhs.re_enabled &&
    lhs.disabled == rhs.disabled;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_driver::RealCMD_<ContainerAllocator1> & lhs, const ::car_driver::RealCMD_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_driver::RealCMD_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_driver::RealCMD_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_driver::RealCMD_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_driver::RealCMD_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_driver::RealCMD_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_driver::RealCMD_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_driver::RealCMD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6838281da4a3b48cd4264834fb376e62";
  }

  static const char* value(const ::car_driver::RealCMD_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6838281da4a3b48cULL;
  static const uint64_t static_value2 = 0xd4264834fb376e62ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_driver::RealCMD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_driver/RealCMD";
  }

  static const char* value(const ::car_driver::RealCMD_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_driver::RealCMD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 小车运行模式切换。\n"
"bool auto_mode\n"
"\n"
"# 轮毂电机左右轮速度值\n"
"uint16 wheel_mode\n"
"uint16 wheel_left_v\n"
"uint16 wheel_right_v\n"
"\n"
"\n"
"# 轮毂电机急停命令\n"
"bool stop_flag\n"
"\n"
"# 轮毂电机重新使能命令\n"
"bool re_enabled\n"
"\n"
"# 轮毂电机失能命令\n"
"bool disabled \n"
;
  }

  static const char* value(const ::car_driver::RealCMD_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_driver::RealCMD_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.auto_mode);
      stream.next(m.wheel_mode);
      stream.next(m.wheel_left_v);
      stream.next(m.wheel_right_v);
      stream.next(m.stop_flag);
      stream.next(m.re_enabled);
      stream.next(m.disabled);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RealCMD_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_driver::RealCMD_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_driver::RealCMD_<ContainerAllocator>& v)
  {
    s << indent << "auto_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_mode);
    s << indent << "wheel_mode: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.wheel_mode);
    s << indent << "wheel_left_v: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.wheel_left_v);
    s << indent << "wheel_right_v: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.wheel_right_v);
    s << indent << "stop_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop_flag);
    s << indent << "re_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.re_enabled);
    s << indent << "disabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.disabled);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_DRIVER_MESSAGE_REALCMD_H
