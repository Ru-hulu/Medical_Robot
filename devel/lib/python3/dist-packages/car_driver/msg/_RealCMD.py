# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from car_driver/RealCMD.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RealCMD(genpy.Message):
  _md5sum = "6838281da4a3b48cd4264834fb376e62"
  _type = "car_driver/RealCMD"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 小车运行模式切换。
bool auto_mode

# 轮毂电机左右轮速度值
uint16 wheel_mode
uint16 wheel_left_v
uint16 wheel_right_v


# 轮毂电机急停命令
bool stop_flag

# 轮毂电机重新使能命令
bool re_enabled

# 轮毂电机失能命令
bool disabled """
  __slots__ = ['auto_mode','wheel_mode','wheel_left_v','wheel_right_v','stop_flag','re_enabled','disabled']
  _slot_types = ['bool','uint16','uint16','uint16','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       auto_mode,wheel_mode,wheel_left_v,wheel_right_v,stop_flag,re_enabled,disabled

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RealCMD, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.auto_mode is None:
        self.auto_mode = False
      if self.wheel_mode is None:
        self.wheel_mode = 0
      if self.wheel_left_v is None:
        self.wheel_left_v = 0
      if self.wheel_right_v is None:
        self.wheel_right_v = 0
      if self.stop_flag is None:
        self.stop_flag = False
      if self.re_enabled is None:
        self.re_enabled = False
      if self.disabled is None:
        self.disabled = False
    else:
      self.auto_mode = False
      self.wheel_mode = 0
      self.wheel_left_v = 0
      self.wheel_right_v = 0
      self.stop_flag = False
      self.re_enabled = False
      self.disabled = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3H3B().pack(_x.auto_mode, _x.wheel_mode, _x.wheel_left_v, _x.wheel_right_v, _x.stop_flag, _x.re_enabled, _x.disabled))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.auto_mode, _x.wheel_mode, _x.wheel_left_v, _x.wheel_right_v, _x.stop_flag, _x.re_enabled, _x.disabled,) = _get_struct_B3H3B().unpack(str[start:end])
      self.auto_mode = bool(self.auto_mode)
      self.stop_flag = bool(self.stop_flag)
      self.re_enabled = bool(self.re_enabled)
      self.disabled = bool(self.disabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3H3B().pack(_x.auto_mode, _x.wheel_mode, _x.wheel_left_v, _x.wheel_right_v, _x.stop_flag, _x.re_enabled, _x.disabled))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.auto_mode, _x.wheel_mode, _x.wheel_left_v, _x.wheel_right_v, _x.stop_flag, _x.re_enabled, _x.disabled,) = _get_struct_B3H3B().unpack(str[start:end])
      self.auto_mode = bool(self.auto_mode)
      self.stop_flag = bool(self.stop_flag)
      self.re_enabled = bool(self.re_enabled)
      self.disabled = bool(self.disabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3H3B = None
def _get_struct_B3H3B():
    global _struct_B3H3B
    if _struct_B3H3B is None:
        _struct_B3H3B = struct.Struct("<B3H3B")
    return _struct_B3H3B
