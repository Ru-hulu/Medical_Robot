# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xj_robot_simu/fusion_analysis.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import xj_robot_simu.msg

class fusion_analysis(genpy.Message):
  _md5sum = "9535f87409ff97acc35ef33565f17f12"
  _type = "xj_robot_simu/fusion_analysis"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 linear_control #线速度指令
float32 linear_feedback #线速度反馈
float32 angular_control #角速度指令
float32 angular_feedback #角速度反馈
float32 lwheel_control #左轮转速指令
float32 lwheel_feedback #左轮转速反馈
float32 lwheel_acc #左轮加速度
float32 rwheel_control #右轮转速指令
float32 rwheel_feedback #右轮转速反馈
float32 rwheel_acc #右轮加速度
carpose odom_pose #odom位置
================================================================================
MSG: xj_robot_simu/carpose
float32 x
float32 y
float32 yaw"""
  __slots__ = ['linear_control','linear_feedback','angular_control','angular_feedback','lwheel_control','lwheel_feedback','lwheel_acc','rwheel_control','rwheel_feedback','rwheel_acc','odom_pose']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','xj_robot_simu/carpose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       linear_control,linear_feedback,angular_control,angular_feedback,lwheel_control,lwheel_feedback,lwheel_acc,rwheel_control,rwheel_feedback,rwheel_acc,odom_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(fusion_analysis, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.linear_control is None:
        self.linear_control = 0.
      if self.linear_feedback is None:
        self.linear_feedback = 0.
      if self.angular_control is None:
        self.angular_control = 0.
      if self.angular_feedback is None:
        self.angular_feedback = 0.
      if self.lwheel_control is None:
        self.lwheel_control = 0.
      if self.lwheel_feedback is None:
        self.lwheel_feedback = 0.
      if self.lwheel_acc is None:
        self.lwheel_acc = 0.
      if self.rwheel_control is None:
        self.rwheel_control = 0.
      if self.rwheel_feedback is None:
        self.rwheel_feedback = 0.
      if self.rwheel_acc is None:
        self.rwheel_acc = 0.
      if self.odom_pose is None:
        self.odom_pose = xj_robot_simu.msg.carpose()
    else:
      self.linear_control = 0.
      self.linear_feedback = 0.
      self.angular_control = 0.
      self.angular_feedback = 0.
      self.lwheel_control = 0.
      self.lwheel_feedback = 0.
      self.lwheel_acc = 0.
      self.rwheel_control = 0.
      self.rwheel_feedback = 0.
      self.rwheel_acc = 0.
      self.odom_pose = xj_robot_simu.msg.carpose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13f().pack(_x.linear_control, _x.linear_feedback, _x.angular_control, _x.angular_feedback, _x.lwheel_control, _x.lwheel_feedback, _x.lwheel_acc, _x.rwheel_control, _x.rwheel_feedback, _x.rwheel_acc, _x.odom_pose.x, _x.odom_pose.y, _x.odom_pose.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.odom_pose is None:
        self.odom_pose = xj_robot_simu.msg.carpose()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.linear_control, _x.linear_feedback, _x.angular_control, _x.angular_feedback, _x.lwheel_control, _x.lwheel_feedback, _x.lwheel_acc, _x.rwheel_control, _x.rwheel_feedback, _x.rwheel_acc, _x.odom_pose.x, _x.odom_pose.y, _x.odom_pose.yaw,) = _get_struct_13f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13f().pack(_x.linear_control, _x.linear_feedback, _x.angular_control, _x.angular_feedback, _x.lwheel_control, _x.lwheel_feedback, _x.lwheel_acc, _x.rwheel_control, _x.rwheel_feedback, _x.rwheel_acc, _x.odom_pose.x, _x.odom_pose.y, _x.odom_pose.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.odom_pose is None:
        self.odom_pose = xj_robot_simu.msg.carpose()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.linear_control, _x.linear_feedback, _x.angular_control, _x.angular_feedback, _x.lwheel_control, _x.lwheel_feedback, _x.lwheel_acc, _x.rwheel_control, _x.rwheel_feedback, _x.rwheel_acc, _x.odom_pose.x, _x.odom_pose.y, _x.odom_pose.yaw,) = _get_struct_13f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13f = None
def _get_struct_13f():
    global _struct_13f
    if _struct_13f is None:
        _struct_13f = struct.Struct("<13f")
    return _struct_13f
